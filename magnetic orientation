# -------------------------------------------------------
# Myelin Figure Magnetic Orientation Analysis
# Fit: Hc = A * r^p  (Power-law)
# Optional: compute bending rigidity κ = (A^2 * Δχ) / G
# -------------------------------------------------------

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats

# === USER INPUTS ===
# Path to your CSV file (two columns: r_micron, Hc_T)
data_file = "myelin_data.csv"   # <--- change to your filename

# Optional physical parameters (set to None if unknown)
delta_chi = 1e-8      # Diamagnetic anisotropy Δχ (dimensionless)
geometry_factor = 1.0 # Geometric factor G (dimensionless)

# === LOAD DATA ===
df = pd.read_csv(data_file)
r_micron = df["r_micron"].values
Hc_T = df["Hc_T"].values

# Convert to SI (meters)
r = r_micron * 1e-6
Hc = Hc_T

# === FIT MODEL ===
def power_law(r, A, p):
    return A * r**p

# Initial guess from log-log linear regression
slope, intercept, _, _, _ = stats.linregress(np.log(r), np.log(Hc))
p0 = slope
A0 = np.exp(intercept)

popt, pcov = curve_fit(power_law, r, Hc, p0=[A0, p0])
A_fit, p_fit = popt
A_err, p_err = np.sqrt(np.diag(pcov))

# === GOODNESS OF FIT ===
residuals = Hc - power_law(r, *popt)
ss_res = np.sum(residuals**2)
ss_tot = np.sum((Hc - np.mean(Hc))**2)
R2 = 1 - (ss_res / ss_tot)

# === PREDICTED VALUES ===
df["Hc_T_fitted"] = power_law(r, *popt)

# === PLOT ===
plt.figure(figsize=(6,5))
plt.loglog(r_micron, Hc, 'o', label="Data")
r_fit = np.linspace(min(r_micron), max(r_micron), 200)
plt.loglog(r_fit, power_law(r_fit*1e-6, *popt), 'r-', 
           label=f"Fit: Hc = {A_fit:.2e} * r^{p_fit:.2f}")
plt.xlabel("Radius r (µm)")
plt.ylabel("Threshold Field Hc (T)")
plt.title("Magnetic Orientation Threshold vs Radius")
plt.legend()
plt.grid(True, which="both", ls="--")
plt.show()

# === OPTIONAL: Compute Bending Rigidity κ ===
kappa = None
if delta_chi is not None and geometry_factor is not None:
    if abs(p_fit + 1) < 0.2:  # only valid near p = -1
        kappa = (A_fit**2 * delta_chi) / geometry_factor
        print(f"Estimated bending rigidity κ = {kappa:.3e} J")
    else:
        print("⚠️ p not close to -1; κ estimation may be unreliable.")

# === PRINT RESULTS ===
print("\n=== Fit Summary ===")
print(f"A = {A_fit:.3e} ± {A_err:.3e}")
print(f"p = {p_fit:.3f} ± {p_err:.3f}")
print(f"R² = {R2:.4f}")
if kappa is not None:
    print(f"κ = {kappa:.3e} J")

# === SAVE OUTPUT ===
df.to_csv("Hc_vs_r_fit_results.csv", index=False)
print("\nSaved fitted data to 'Hc_vs_r_fit_results.csv'")
